generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model appointments {
  appointment_id       Int                   @id @default(autoincrement())
  user_id              Int?
  professional_id      Int?
  appointment_date     DateTime              @db.Timestamp(6)
  status               String?               @default("scheduled") @db.VarChar(20)
  notes                String?
  prescription         String?
  created_at           DateTime?             @default(now()) @db.Timestamp(6)
  medical_professional medical_professional? @relation(fields: [professional_id], references: [medi_id], onDelete: Cascade, onUpdate: NoAction)
  user_data            user_data?            @relation(fields: [user_id], references: [user_id], onDelete: Cascade, onUpdate: NoAction)
}

model medical_professional {
  medi_id                       Int                            @id @default(autoincrement())
  name                          String                         @db.VarChar(50)
  email                         String                         @unique @db.VarChar(100)
  phone_number                  String?                        @db.VarChar(15)
  address                       String?                        @db.VarChar(200)
  maps_link                     String?
  specialty                     String?                        @db.VarChar(100)
  license_number                String?                        @unique @db.VarChar(50)
  created_at                    DateTime?                      @default(now()) @db.Timestamp(6)
  languages                     String?
  appointments                  appointments[]
  medical_professional_password medical_professional_password?
}

model medical_professional_password {
  professional_id      Int                  @id
  password_hash        String               @db.VarChar(255)
  last_updated         DateTime?            @default(now()) @db.Timestamp(6)
  medical_professional medical_professional @relation(fields: [professional_id], references: [medi_id], onDelete: Cascade, onUpdate: NoAction)
}

model user_data {
  user_id            Int            @id @default(autoincrement())
  first_name         String         @db.VarChar(50)
  last_name          String         @db.VarChar(50)
  email              String?        @unique @db.VarChar(100)
  phone_number       String         @unique @db.VarChar(15)
  preferred_language String?        @db.VarChar(100)
  date_of_birth      DateTime?      @db.Date
  age                Int?
  gender             String?        @db.VarChar(10)
  address            String?        @db.VarChar(100)
  created_at         DateTime?      @default(now()) @db.Timestamp(6)
  appointments       appointments[]
  user_password      user_password?
}

model user_password {
  user_id       Int       @id
  password_hash String    @db.VarChar(255)
  last_updated  DateTime? @default(now()) @db.Timestamp(6)
  user_data     user_data @relation(fields: [user_id], references: [user_id], onDelete: Cascade, onUpdate: NoAction)
}
